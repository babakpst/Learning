Parallel and concurrent programming Part I.

CHAPER 2:
- concurrent vs parallel: concurrent means can be run independently
- thread vs process: thread is part of process, threads access to the same memory.
- To compile a code with thread: g++ -pthread main.cpp -o main
- The C++ lib for multi-threading: #include <thread>
- The C++ lib for timing: #include <chrono>
- To get process ID:  getpid()
- To get thread ID:  std::this_thread::get_id()
- To initiate a thread:   std::thread thread1(func_name, args);
- timer for sleep:   std::this_thread::sleep_for(std::chrono::milliseconds(10));
- barrier/sync:  barron.join(); // master thread waits until thread joins
- joinable: indicates whether a thread is still alive or not: olivia.joinable()? "ture":"false"
- Detached threads: 
  * Daemon (background thread)
  * Daemon does not prevent the process (master) from terminating
  * By default, threads are created as non-daemon, thus the thread should turn to daemon manually. That means the thread is detached.
  * Before making a thread daemon, you need to make sure that it has no side effects if it prematurly terminates.
  * To make a thread daemon(detached) use thread_name.detach(). In that case the thread is no longer joinable, i.e. you cannot write: thread_name.join();

CHAPTER 3:
- Data race: two or more threads access the same memory location.
- To avoid data race,  we need to use mutual exclusion: only one thread can access at the time. To do so, we need to do atomic operation. This should be short, to increase efficiency.
  * #include <mutex> // mutual exclusion.
  * std::mutex pencil;
  * pencil.lock();
  * // some atomic operation.
  * pencil.unlock();

- atomic is different from lock. atom is a separate lib.
  * #include <atomic>
  * std::atomic<unsigned int> garlic_count(0); // This is a shared memory with no race condition, now.

CHAPTER 4:
- DEADLOCK: If a thread try to lock a mutex that is already locked, it will enter a deadlock. All threads and processes are unable to execute. In a recursive process, or a nested function, a thread may require to lock a mutex multiple time. 
- To avoid DEADLOCK, we can use REENTRANT MUTEX. This allows a mutex to be lock multiple times. To release the lock, we need equal number of unlocks. Not everyone agrees with REENTRANT MUTEX. For recursive functions it is needed (recursive lock=recursive mutex = reentrant lock = reentrant mutex). 
- use std::recursive_mutex pencil; instead of std::mutex pencil;

- TRY LOCK: Non-blocking lock/acquire method for mutex, means If the mutex is available, lock it, and return true. Otherwise, if mutex is already locked, return false. Then the thread can do other stuff, until it acquires the lock.
- So use: pencil.try_lock() instead of pencil.lock();

- shared_Mutex (#include <shared_mutex> std::shared_mutex marker;          marker.lock_shared(); ) is used for reader-writer lock. It can be locked in two ways:
  * SHARED READ: multipe threads to read at once.
  * EXCLUSIVE WRITE: only one thread at a time

If the lock is still locked in the read mode, no threat can acquire the lock in the write mode. 
This shared_mutex is useful if #threads reading > #threads writing (for example data base application).

CHAPTER 5:
- DEADLOCK: Each member is waiting for another member to take action.
- We need the develop a code that is free from DEADLOCK, to guarantee that the LIVENESS of the code. The simplest way to avoid deadlock is to use lock oreder (see the code).
- The other possible solution is scoped_lock.

- ABANDONED LOCK (another form of deadlock): If a thread acquire a lock and terminates, due to some unexpected reason, it may not automatically release the locks. Ended up a deadlock. Other threads are waiting for the lock to be released. 
- To prevent the deadlock due to the abandoned deadlock, we can use the scoped_lock();         // The scoped lock holds on to the lock, for the scope in which the lock is created. Means, if the thread terminates, the lock would be unlocked.

- STARVATION: A process or thread perpetually denied resources it needs: If we have a large number of threads, some threads may never get the chance to acquire the lock. 


- LIVELOCK: mutiple threads or processes are actively responding to each other to resolve the conflict, but that prevents them from making any progress. Happens when two threads are designed to respond to actions of each other. 

